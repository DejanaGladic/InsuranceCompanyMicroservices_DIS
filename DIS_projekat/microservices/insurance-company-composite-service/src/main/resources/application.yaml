api:

  common:
    version: 1.0.0
    title: Sample API
    description: Description of the API...
    termsOfServiceUrl: MINE TERMS OF SERVICE URL
    license: License
    licenseUrl: MY LICENSE URL

    contact:
      name: Contact
      url: My
      email: me@mail.com

  insurance-company-composite:

    get-composite-insurance-company:
      description: Returns a composite view of the specified insurance company id
      notes: |
        # Normal response
        If the requested insurance company id is found the method will return information regarding:
        1. Base insurance company information
        1. Employees
        1. Insurance offers
        1. Transactions
        1. Service Addresses
        (technical information regarding the addresses of the microservices that created the response)

        # Expected partial and error responses
        In the following cases, only a partial response be created (used to simplify testing of error conditions)

        ## Insurance company id 113
        200 - Ok, but no Employees will be returned

        ## Insurance company id 213
        200 - Ok, but no Insurance offers will be returned
        
         ## Insurance company id 313
        200 - Ok, but no Transactions will be returned

        ## Non numerical product id
        400 - A <b>Bad Request</b> error will be returned

        ## Insurance company id 13
        404 - A <b>Not Found</b> error will be returned

        ## Negative Insurance company ids
        422 - An <b>Unprocessable Entity</b> error will be returned
    create-composite-product:
      description: Creates a composite insurance company
      notes: |
        # Normal response
        The composite insurance company information posted to the API will be splitted up and stored as separate insurance company-info, employee, insurance offer and transaction entities.
        # Expected error responses
        1. If a insurance company with the same insuranceCompanyId as specified in the posted information already exists,
           an <b>422 - Unprocessable Entity</b> error with a "duplicate key" error message will be returned
    delete-composite-product:
      description: Deletes a insurance company composite
      notes: |
        # Normal response
        Entities for insurance company information, employees, insurance offers and transactions related to the specificed insuranceCompanyId will be deleted.
        The implementation of the delete method is idempotent, i.e. it can be called several times with the same response.
        This means that a delete request of a non existing insurance company will return <b>200 Ok</b>.
server.port: 7000
server.error.include-message: always

app:
  insurance-company-service:
    host: localhost
    port: 7001
  employee-service:
    host: localhost
    port: 7002
  insurance-offer-service:
    host: localhost
    port: 7003
  transaction-service:
    host: localhost
    port: 7004

spring.cloud.stream:
  defaultBinder: rabbit
  default.contentType: application/json
  bindings:
    output-insurance-companies:
      destination: insuranceCompanies
      producer:
        required-groups: auditGroup
    output-employees:
      destination: employees
      producer:
        required-groups: auditGroup
    output-insurance-offers:
      destination: insuranceOffers
      producer:
        required-groups: auditGroup
    output-transactions:
      destination: transactions
      producer:
        required-groups: auditGroup

spring.cloud.stream.kafka.binder:
  brokers: 127.0.0.1
  defaultBrokerPort: 9092

spring.rabbitmq:
  host: 127.0.0.1
  port: 5672
  username: guest
  password: guest

logging:
    level:
        root: INFO
        se.magnus: DEBUG

management.endpoint.health.show-details: "ALWAYS"
management.endpoints.web.exposure.include: "*"
---
spring.profiles: docker

server.port: 8081

app:
  employee-service:
    host: employee
    port: 8081
  insurance-company-service:
    host: insurance-company
    port: 8081
  insurance-offer-service:
    host: insurance-offer
    port: 8081
  transaction-service:
    host: transaction
    port: 8081

spring.rabbitmq.host: rabbitmq

spring.cloud.stream.kafka.binder.brokers: kafka