<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="se.magnus.microservices.core.insuranceoffer.PersistenceTests" tests="5" skipped="0" failures="0" errors="0" timestamp="2022-05-27T00:52:50" hostname="DESKTOP-HJGV6OB" time="0.851">
  <properties/>
  <testcase name="optimisticLockError" classname="se.magnus.microservices.core.insuranceoffer.PersistenceTests" time="0.735"/>
  <testcase name="updateInsuranceOffer" classname="se.magnus.microservices.core.insuranceoffer.PersistenceTests" time="0.023"/>
  <testcase name="getByInsuranceCompanyId" classname="se.magnus.microservices.core.insuranceoffer.PersistenceTests" time="0.032"/>
  <testcase name="createInsuranceOffer" classname="se.magnus.microservices.core.insuranceoffer.PersistenceTests" time="0.024"/>
  <testcase name="deleteInsuranceOffer" classname="se.magnus.microservices.core.insuranceoffer.PersistenceTests" time="0.031"/>
  <system-out><![CDATA[02:52:47.030 [Test worker] DEBUG org.springframework.test.annotation.ProfileValueUtils - Retrieved @ProfileValueSourceConfiguration [null] for test class [se.magnus.microservices.core.insuranceoffer.PersistenceTests]
02:52:47.030 [Test worker] DEBUG org.springframework.test.annotation.ProfileValueUtils - Retrieved ProfileValueSource type [class org.springframework.test.annotation.SystemProfileValueSource] for class [se.magnus.microservices.core.insuranceoffer.PersistenceTests]
02:52:47.031 [Test worker] DEBUG org.springframework.test.annotation.ProfileValueUtils - Retrieved @ProfileValueSourceConfiguration [null] for test class [se.magnus.microservices.core.insuranceoffer.PersistenceTests]
02:52:47.031 [Test worker] DEBUG org.springframework.test.annotation.ProfileValueUtils - Retrieved ProfileValueSource type [class org.springframework.test.annotation.SystemProfileValueSource] for class [se.magnus.microservices.core.insuranceoffer.PersistenceTests]
02:52:47.038 [Test worker] DEBUG org.springframework.test.context.support.AbstractDirtiesContextTestExecutionListener - Before test class: context [DefaultTestContext@4c84afda testClass = PersistenceTests, testInstance = [null], testMethod = [null], testException = [null], mergedContextConfiguration = [MergedContextConfiguration@4af7a062 testClass = PersistenceTests, locations = '{}', classes = '{class se.magnus.microservices.core.insuranceoffer.InsuranceOfferServiceApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.autoconfigure.OverrideAutoConfigurationContextCustomizerFactory$DisableAutoConfigurationContextCustomizer@7f09cb69, org.springframework.boot.test.autoconfigure.filter.TypeExcludeFiltersContextCustomizer@351584c0, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@5c7b23bd, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@38eefb51, [ImportsContextCustomizer@69c303b0 key = [org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration, org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration, org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration, org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration, org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration, org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration, org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration, org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration, org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration, org.springframework.boot.test.autoconfigure.jdbc.TestDatabaseAutoConfiguration, org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManagerAutoConfiguration]], org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@4d84e89, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@65c693c, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.context.SpringBootTestArgs@1], contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map[[empty]]], class annotated with @DirtiesContext [false] with mode [null].
02:52:47.041 [Test worker] DEBUG org.springframework.test.annotation.ProfileValueUtils - Retrieved @ProfileValueSourceConfiguration [null] for test class [se.magnus.microservices.core.insuranceoffer.PersistenceTests]
02:52:47.041 [Test worker] DEBUG org.springframework.test.annotation.ProfileValueUtils - Retrieved ProfileValueSource type [class org.springframework.test.annotation.SystemProfileValueSource] for class [se.magnus.microservices.core.insuranceoffer.PersistenceTests]
02:52:47.047 [Test worker] DEBUG org.springframework.test.context.support.DependencyInjectionTestExecutionListener - Performing dependency injection for test context [[DefaultTestContext@4c84afda testClass = PersistenceTests, testInstance = se.magnus.microservices.core.insuranceoffer.PersistenceTests@5afc4fbd, testMethod = [null], testException = [null], mergedContextConfiguration = [MergedContextConfiguration@4af7a062 testClass = PersistenceTests, locations = '{}', classes = '{class se.magnus.microservices.core.insuranceoffer.InsuranceOfferServiceApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.autoconfigure.OverrideAutoConfigurationContextCustomizerFactory$DisableAutoConfigurationContextCustomizer@7f09cb69, org.springframework.boot.test.autoconfigure.filter.TypeExcludeFiltersContextCustomizer@351584c0, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@5c7b23bd, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@38eefb51, [ImportsContextCustomizer@69c303b0 key = [org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration, org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration, org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration, org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration, org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration, org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration, org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration, org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration, org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration, org.springframework.boot.test.autoconfigure.jdbc.TestDatabaseAutoConfiguration, org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManagerAutoConfiguration]], org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@4d84e89, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@65c693c, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@0, org.springframework.boot.test.context.SpringBootTestArgs@1], contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map[[empty]]]].
02:52:47.080 [Test worker] DEBUG org.springframework.test.context.support.TestPropertySourceUtils - Adding inlined properties to environment: {spring.jmx.enabled=false, org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTestContextBootstrapper=true}

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::        (v2.3.0.RELEASE)

2022-05-27 02:52:47.711  INFO 7812 --- [    Test worker] s.m.m.c.insuranceoffer.PersistenceTests  : Starting PersistenceTests on DESKTOP-HJGV6OB with PID 7812 (started by user in C:\Users\user\git\InsuranceCompanyMicroservices_DIS\DIS_projekat\microservices\insurance-offer-service)
2022-05-27 02:52:47.712 DEBUG 7812 --- [    Test worker] s.m.m.c.insuranceoffer.PersistenceTests  : Running with Spring Boot v2.3.0.RELEASE, Spring v5.2.6.RELEASE
2022-05-27 02:52:47.715  INFO 7812 --- [    Test worker] s.m.m.c.insuranceoffer.PersistenceTests  : No active profile set, falling back to default profiles: default
2022-05-27 02:52:48.395  INFO 7812 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in LAZY mode.
2022-05-27 02:52:48.620  INFO 7812 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 208ms. Found 1 JPA repository interfaces.
2022-05-27 02:52:48.688  INFO 7812 --- [    Test worker] beddedDataSourceBeanFactoryPostProcessor : Replacing 'dataSource' DataSource bean with embedded version
2022-05-27 02:52:48.895  INFO 7812 --- [    Test worker] o.s.j.d.e.EmbeddedDatabaseFactory        : Starting embedded database: url='jdbc:h2:mem:bfe4d6e9-9dd1-4774-957b-00f947a2fa52;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
2022-05-27 02:52:49.488  INFO 7812 --- [    Test worker] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2022-05-27 02:52:49.566  INFO 7812 --- [    Test worker] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 5.4.15.Final
2022-05-27 02:52:49.727  INFO 7812 --- [    Test worker] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2022-05-27 02:52:49.914  INFO 7812 --- [    Test worker] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect
Hibernate: drop table if exists insurance_offers CASCADE 
Hibernate: drop sequence if exists hibernate_sequence
Hibernate: create sequence hibernate_sequence start with 1 increment by 1
Hibernate: create table insurance_offers (id integer not null, currency_offer varchar(255), insurance_company_id integer not null, insurance_offer_id integer not null, offer_name varchar(255), price double not null, type_insurance_coverage varchar(255), type_offer_program varchar(255), version integer not null, primary key (id))
Hibernate: alter table insurance_offers add constraint insuranceOffers_unique_idx unique (insurance_company_id, insurance_offer_id)
2022-05-27 02:52:50.679  INFO 7812 --- [    Test worker] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2022-05-27 02:52:50.687  INFO 7812 --- [    Test worker] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2022-05-27 02:52:50.846  INFO 7812 --- [    Test worker] s.m.m.c.insuranceoffer.PersistenceTests  : Started PersistenceTests in 3.762 seconds (JVM running for 5.423)
Hibernate: select insuranceo0_.id as id1_0_, insuranceo0_.currency_offer as currency2_0_, insuranceo0_.insurance_company_id as insuranc3_0_, insuranceo0_.insurance_offer_id as insuranc4_0_, insuranceo0_.offer_name as offer_na5_0_, insuranceo0_.price as price6_0_, insuranceo0_.type_insurance_coverage as type_ins7_0_, insuranceo0_.type_offer_program as type_off8_0_, insuranceo0_.version as version9_0_ from insurance_offers insuranceo0_
Hibernate: call next value for hibernate_sequence
Hibernate: insert into insurance_offers (currency_offer, insurance_company_id, insurance_offer_id, offer_name, price, type_insurance_coverage, type_offer_program, version, id) values (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: select insuranceo0_.id as id1_0_0_, insuranceo0_.currency_offer as currency2_0_0_, insuranceo0_.insurance_company_id as insuranc3_0_0_, insuranceo0_.insurance_offer_id as insuranc4_0_0_, insuranceo0_.offer_name as offer_na5_0_0_, insuranceo0_.price as price6_0_0_, insuranceo0_.type_insurance_coverage as type_ins7_0_0_, insuranceo0_.type_offer_program as type_off8_0_0_, insuranceo0_.version as version9_0_0_ from insurance_offers insuranceo0_ where insuranceo0_.id=?
Hibernate: select insuranceo0_.id as id1_0_0_, insuranceo0_.currency_offer as currency2_0_0_, insuranceo0_.insurance_company_id as insuranc3_0_0_, insuranceo0_.insurance_offer_id as insuranc4_0_0_, insuranceo0_.offer_name as offer_na5_0_0_, insuranceo0_.price as price6_0_0_, insuranceo0_.type_insurance_coverage as type_ins7_0_0_, insuranceo0_.type_offer_program as type_off8_0_0_, insuranceo0_.version as version9_0_0_ from insurance_offers insuranceo0_ where insuranceo0_.id=?
Hibernate: select insuranceo0_.id as id1_0_0_, insuranceo0_.currency_offer as currency2_0_0_, insuranceo0_.insurance_company_id as insuranc3_0_0_, insuranceo0_.insurance_offer_id as insuranc4_0_0_, insuranceo0_.offer_name as offer_na5_0_0_, insuranceo0_.price as price6_0_0_, insuranceo0_.type_insurance_coverage as type_ins7_0_0_, insuranceo0_.type_offer_program as type_off8_0_0_, insuranceo0_.version as version9_0_0_ from insurance_offers insuranceo0_ where insuranceo0_.id=?
Hibernate: update insurance_offers set currency_offer=?, insurance_company_id=?, insurance_offer_id=?, offer_name=?, price=?, type_insurance_coverage=?, type_offer_program=?, version=? where id=? and version=?
Hibernate: select insuranceo0_.id as id1_0_0_, insuranceo0_.currency_offer as currency2_0_0_, insuranceo0_.insurance_company_id as insuranc3_0_0_, insuranceo0_.insurance_offer_id as insuranc4_0_0_, insuranceo0_.offer_name as offer_na5_0_0_, insuranceo0_.price as price6_0_0_, insuranceo0_.type_insurance_coverage as type_ins7_0_0_, insuranceo0_.type_offer_program as type_off8_0_0_, insuranceo0_.version as version9_0_0_ from insurance_offers insuranceo0_ where insuranceo0_.id=?
Hibernate: select insuranceo0_.id as id1_0_0_, insuranceo0_.currency_offer as currency2_0_0_, insuranceo0_.insurance_company_id as insuranc3_0_0_, insuranceo0_.insurance_offer_id as insuranc4_0_0_, insuranceo0_.offer_name as offer_na5_0_0_, insuranceo0_.price as price6_0_0_, insuranceo0_.type_insurance_coverage as type_ins7_0_0_, insuranceo0_.type_offer_program as type_off8_0_0_, insuranceo0_.version as version9_0_0_ from insurance_offers insuranceo0_ where insuranceo0_.id=?
Hibernate: select insuranceo0_.id as id1_0_, insuranceo0_.currency_offer as currency2_0_, insuranceo0_.insurance_company_id as insuranc3_0_, insuranceo0_.insurance_offer_id as insuranc4_0_, insuranceo0_.offer_name as offer_na5_0_, insuranceo0_.price as price6_0_, insuranceo0_.type_insurance_coverage as type_ins7_0_, insuranceo0_.type_offer_program as type_off8_0_, insuranceo0_.version as version9_0_ from insurance_offers insuranceo0_
Hibernate: delete from insurance_offers where id=? and version=?
Hibernate: call next value for hibernate_sequence
Hibernate: insert into insurance_offers (currency_offer, insurance_company_id, insurance_offer_id, offer_name, price, type_insurance_coverage, type_offer_program, version, id) values (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: select insuranceo0_.id as id1_0_0_, insuranceo0_.currency_offer as currency2_0_0_, insuranceo0_.insurance_company_id as insuranc3_0_0_, insuranceo0_.insurance_offer_id as insuranc4_0_0_, insuranceo0_.offer_name as offer_na5_0_0_, insuranceo0_.price as price6_0_0_, insuranceo0_.type_insurance_coverage as type_ins7_0_0_, insuranceo0_.type_offer_program as type_off8_0_0_, insuranceo0_.version as version9_0_0_ from insurance_offers insuranceo0_ where insuranceo0_.id=?
Hibernate: update insurance_offers set currency_offer=?, insurance_company_id=?, insurance_offer_id=?, offer_name=?, price=?, type_insurance_coverage=?, type_offer_program=?, version=? where id=? and version=?
Hibernate: select insuranceo0_.id as id1_0_0_, insuranceo0_.currency_offer as currency2_0_0_, insuranceo0_.insurance_company_id as insuranc3_0_0_, insuranceo0_.insurance_offer_id as insuranc4_0_0_, insuranceo0_.offer_name as offer_na5_0_0_, insuranceo0_.price as price6_0_0_, insuranceo0_.type_insurance_coverage as type_ins7_0_0_, insuranceo0_.type_offer_program as type_off8_0_0_, insuranceo0_.version as version9_0_0_ from insurance_offers insuranceo0_ where insuranceo0_.id=?
Hibernate: select insuranceo0_.id as id1_0_, insuranceo0_.currency_offer as currency2_0_, insuranceo0_.insurance_company_id as insuranc3_0_, insuranceo0_.insurance_offer_id as insuranc4_0_, insuranceo0_.offer_name as offer_na5_0_, insuranceo0_.price as price6_0_, insuranceo0_.type_insurance_coverage as type_ins7_0_, insuranceo0_.type_offer_program as type_off8_0_, insuranceo0_.version as version9_0_ from insurance_offers insuranceo0_
Hibernate: delete from insurance_offers where id=? and version=?
Hibernate: call next value for hibernate_sequence
Hibernate: insert into insurance_offers (currency_offer, insurance_company_id, insurance_offer_id, offer_name, price, type_insurance_coverage, type_offer_program, version, id) values (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: select insuranceo0_.id as id1_0_, insuranceo0_.currency_offer as currency2_0_, insuranceo0_.insurance_company_id as insuranc3_0_, insuranceo0_.insurance_offer_id as insuranc4_0_, insuranceo0_.offer_name as offer_na5_0_, insuranceo0_.price as price6_0_, insuranceo0_.type_insurance_coverage as type_ins7_0_, insuranceo0_.type_offer_program as type_off8_0_, insuranceo0_.version as version9_0_ from insurance_offers insuranceo0_ where insuranceo0_.insurance_company_id=?
Hibernate: select insuranceo0_.id as id1_0_, insuranceo0_.currency_offer as currency2_0_, insuranceo0_.insurance_company_id as insuranc3_0_, insuranceo0_.insurance_offer_id as insuranc4_0_, insuranceo0_.offer_name as offer_na5_0_, insuranceo0_.price as price6_0_, insuranceo0_.type_insurance_coverage as type_ins7_0_, insuranceo0_.type_offer_program as type_off8_0_, insuranceo0_.version as version9_0_ from insurance_offers insuranceo0_
Hibernate: delete from insurance_offers where id=? and version=?
Hibernate: call next value for hibernate_sequence
Hibernate: insert into insurance_offers (currency_offer, insurance_company_id, insurance_offer_id, offer_name, price, type_insurance_coverage, type_offer_program, version, id) values (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: call next value for hibernate_sequence
Hibernate: insert into insurance_offers (currency_offer, insurance_company_id, insurance_offer_id, offer_name, price, type_insurance_coverage, type_offer_program, version, id) values (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: select insuranceo0_.id as id1_0_0_, insuranceo0_.currency_offer as currency2_0_0_, insuranceo0_.insurance_company_id as insuranc3_0_0_, insuranceo0_.insurance_offer_id as insuranc4_0_0_, insuranceo0_.offer_name as offer_na5_0_0_, insuranceo0_.price as price6_0_0_, insuranceo0_.type_insurance_coverage as type_ins7_0_0_, insuranceo0_.type_offer_program as type_off8_0_0_, insuranceo0_.version as version9_0_0_ from insurance_offers insuranceo0_ where insuranceo0_.id=?
Hibernate: select count(*) as col_0_0_ from insurance_offers insuranceo0_
Hibernate: select insuranceo0_.id as id1_0_, insuranceo0_.currency_offer as currency2_0_, insuranceo0_.insurance_company_id as insuranc3_0_, insuranceo0_.insurance_offer_id as insuranc4_0_, insuranceo0_.offer_name as offer_na5_0_, insuranceo0_.price as price6_0_, insuranceo0_.type_insurance_coverage as type_ins7_0_, insuranceo0_.type_offer_program as type_off8_0_, insuranceo0_.version as version9_0_ from insurance_offers insuranceo0_
Hibernate: delete from insurance_offers where id=? and version=?
Hibernate: delete from insurance_offers where id=? and version=?
Hibernate: call next value for hibernate_sequence
Hibernate: insert into insurance_offers (currency_offer, insurance_company_id, insurance_offer_id, offer_name, price, type_insurance_coverage, type_offer_program, version, id) values (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: select insuranceo0_.id as id1_0_0_, insuranceo0_.currency_offer as currency2_0_0_, insuranceo0_.insurance_company_id as insuranc3_0_0_, insuranceo0_.insurance_offer_id as insuranc4_0_0_, insuranceo0_.offer_name as offer_na5_0_0_, insuranceo0_.price as price6_0_0_, insuranceo0_.type_insurance_coverage as type_ins7_0_0_, insuranceo0_.type_offer_program as type_off8_0_0_, insuranceo0_.version as version9_0_0_ from insurance_offers insuranceo0_ where insuranceo0_.id=?
Hibernate: delete from insurance_offers where id=? and version=?
Hibernate: select count(*) as col_0_0_ from insurance_offers insuranceo0_ where insuranceo0_.id=?
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
