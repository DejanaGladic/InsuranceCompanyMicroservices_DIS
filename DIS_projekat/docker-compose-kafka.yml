version: '2.1'

services:
  insurance-company:
    build: microservices/insurance-company-service
    mem_limit: 600m
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_0,kafka
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    depends_on:
      - kafka
      - mongodb

  insurance-company-p1:
    build: microservices/insurance-company-service
    mem_limit: 600m
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_1,kafka
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    depends_on:
      - kafka
      - mongodb

  employee:
    build: microservices/employee-service
    mem_limit: 600m
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_0,kafka
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    depends_on:
      - kafka
      - mongodb

  employee-p1:
    build: microservices/employee-service
    mem_limit: 600m
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_1,kafka
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    depends_on:
      - kafka
      - mongodb

  insurance-offer:
    build: microservices/insurance-offer-service
    mem_limit: 600m
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_0,kafka
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    depends_on:
      mysql2:
        condition: service_healthy
      kafka:
        condition: service_started

  insurance-offer-p1:
    build: microservices/insurance-offer-service
    mem_limit: 600m
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_1,kafka
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    depends_on:
      mysql2:
        condition: service_healthy
      kafka:
        condition: service_started

  transaction:
    build: microservices/transaction-service
    mem_limit: 600m
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_0,kafka
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    depends_on:
      mysql1:
        condition: service_healthy
      kafka:
        condition: service_started

  transaction-p1:
    build: microservices/transaction-service
    mem_limit: 600m
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_1,kafka
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    depends_on:
      mysql1:
        condition: service_healthy
      kafka:
        condition: service_started

  insurance-company-composite:
    build: microservices/insurance-company-composite-service
    mem_limit: 600m
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,kafka
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    depends_on:
      - kafka

  eureka:
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    build: spring-cloud/eureka-server
    mem_limit: 350m

  gateway:
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    build: spring-cloud/gateway
    mem_limit: 350m
    ports:
      - "8443:8443"

  auth-server:
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    build: spring-cloud/authorization-server
    mem_limit: 350m


  config-server:
    environment:
      - SPRING_PROFILES_ACTIVE=docker,native
      - ENCRYPT_KEY=${CONFIG_SERVER_ENCRYPT_KEY}
      - SPRING_SECURITY_USER_NAME=${CONFIG_SERVER_USR}
      - SPRING_SECURITY_USER_PASSWORD=${CONFIG_SERVER_PWD}
    volumes:
      - $PWD/config-repo:/config-repo
    build: spring-cloud/config-server
    mem_limit: 350m

  # $ mongo
  mongodb:
    image: mongo:3.6.9
    mem_limit: 600m
    ports:
      - "27017:27017"
    command: mongod --smallfiles
    healthcheck:
      test: "mongo --eval 'db.stats().ok'"
      interval: 20s
      timeout: 5s
      retries: 10

  mysql1:
    image: mysql:5.7
    mem_limit: 600m
    environment:
      MYSQL_ROOT_PASSWORD: rootpwd
      MYSQL_USER: user
      MYSQL_HOST: localhost
      MYSQL_PASSWORD: pwd
      MYSQL_DATABASE: transaction-db
    ports:
      - "3307:3306"
    healthcheck:
      test: "/usr/bin/mysql --user=user --password=pwd --execute \"SHOW DATABASES;\""
      interval: 10s
      timeout: 5s
      retries: 10

  mysql2:
    image: mysql:5.7
    mem_limit: 600m
    environment:
      MYSQL_ROOT_PASSWORD: rootpwd
      MYSQL_USER: user
      MYSQL_HOST: localhost
      MYSQL_PASSWORD: pwd
      MYSQL_DATABASE: insurance-offer-db
    ports:
      - "3308:3306"
    healthcheck:
      test: "/usr/bin/mysql --user=user --password=pwd --execute \"SHOW DATABASES;\""
      interval: 10s
      timeout: 5s
      retries: 10

#:2.12-2.1.0
  kafka:
    image: wurstmeister/kafka
    mem_limit: 600m
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=kafka
      - KAFKA_ADVERTISED_PORT=9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
    depends_on:
      - zookeeper

  #:3.4.6
  zookeeper:
    image: wurstmeister/zookeeper
    mem_limit: 600m
    ports:
      - "2181:2181"
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=zookeeper